// THIS FILE WAS GENERATED BY `xtp-go-bindgen`. DO NOT EDIT.
package main

import (
	<% if (JSON.stringify(schema).includes("enum")) { %>"errors"<% } %>
	<% if (JSON.stringify(schema).includes("date-time")) { %>"time"<% } %>

	pdk "github.com/extism/go-pdk"
)

<% schema.exports.forEach(ex => { -%>
//export <%- ex.name %>
func _<%- goName(ex.name) %>() int32 {
	var err error
	_ = err
  <% if (ex.input) { -%>
    <% if (isJsonEncoded(ex.input)) { -%>
			pdk.Log(pdk.LogDebug, "<%- goName(ex.name) %>: getting JSON input")
			var input <%- toGolangType(ex.input) %>
			err = pdk.InputJSON(&input)
			if err != nil {
				pdk.SetError(err)
				return -1
			}
    <% } else if (isString(ex.input)) { -%>
			pdk.Log(pdk.LogDebug, "<%- goName(ex.name) %>: getting string input")
			input := pdk.InputString()
    <% } else if (isEnum(ex.input)) { -%>
			pdk.Log(pdk.LogDebug, "<%- goName(ex.name) %>: getting enum string input")
      input, err := stringTo<%- goName(ex.input.xtpType.name) %>(pdk.InputString())
      if err != nil {
        pdk.SetError(err)
        return -1
      }
    <% } else { -%>
			pdk.Log(pdk.LogDebug, "<%- goName(ex.name) %>: getting bytes input")
      input := pdk.Input()
    <% } -%>

		pdk.Log(pdk.LogDebug, "<%- goName(ex.name) %>: calling implementation function")
    <% if (ex.output) { -%>
      output, err := <%- goName(ex.name) %>(input)
			if err != nil {
				pdk.SetError(err)
				return -1
			}
    <% } else { -%>
      err = <%- goName(ex.name) %>(input)
			if err != nil {
				pdk.SetError(err)
				return -1
			}
    <% } -%>
  <% } else { -%>
    <% if (ex.output) { -%>
      output, err := <%- goName(ex.name) %>()
    <% } else { -%>
      err = <%- goName(ex.name) %>()
    <% } -%>
		if err != nil {
			pdk.SetError(err)
			return -1
		}
  <% } -%>

  <% if (ex.output) { -%>
    <% if (isJsonEncoded(ex.output)) { -%>
			pdk.Log(pdk.LogDebug, "<%- goName(ex.name) %>: setting JSON output")
			err = pdk.OutputJSON(output)
			if err != nil {
				pdk.SetError(err)
				return -1
			}
    <% } else if (isString(ex.output)) { -%>
			pdk.Log(pdk.LogDebug, "<%- goName(ex.name) %>: setting string output")
      pdk.OutputString(output)
    <% } else { -%>
			pdk.Log(pdk.LogDebug, "<%- goName(ex.name) %>: setting bytes output")
      pdk.Output(output)
    <% } -%>
  <% } -%>

	pdk.Log(pdk.LogDebug, "<%- goName(ex.name) %>: returning")
  return 0
}

<% }) %>

<% if (schema.imports.length > 0) { %>
	<% Object.values(schema.imports).forEach(im => { %>
		//go:wasmimport extism:host/user <%- im.name %>
		func _<%- goName(im.name) %>(<%- im.input ? "uint64" : null %>) <%- im.output ? "uint64" : null %>
	<% }) %>

	<% } %>
	
	<% Object.values(schema.schemas).forEach(schema => { %>
		<% if (isObject(schema)) { %>
	
	// <%- formatCommentBlock(schema.description, "// ") %>
	type <%- goName(schema.name) %> struct {
		<% schema.properties.forEach(p => { -%>
		<% if (p.description) { -%>
		// <%- formatCommentBlock(p.description, "// ") %>
		<% } -%>
		<%- goName(p.name) %> <%- toGolangType(p, p.required) %> `json:"<%- p.name %><%- !p.required ? ",omitempty" : null %>"`
		<% }) %>
	}
		<% } else if (isEnum(schema)) { %>
	
	// <%- formatCommentLine(schema.description) %>
	type <%- goName(schema.name) %> string
	const (
		<% schema.xtpType.values.forEach((variant, i) => { -%>
			<%- `${goName(schema.name)}${goName(variant)} ${goName(schema.name)} = "${variant}"` %>
		<% }) -%>
	)

	func (v <%- goName(schema.name) %>) String() string {
		switch (v) {
		<% schema.xtpType.values.forEach((variant) => { -%>
		case <%- `${goName(schema.name)}${goName(variant)}` %>:
			return `<%- variant %>`
		<% }) -%>
		default: 
			return ""
		}
	}

	func stringTo<%- goName(schema.name) %>(s string) (<%- goName(schema.name) %>, error) {
		switch (s) {
		<% schema.xtpType.values.forEach((variant) => { -%>
		case `<%- variant %>`:
			return <%- `${goName(schema.name)}${goName(variant)}` %>, nil
		<% }) -%>
		default:
			return <%- goName(schema.name) %>(""), errors.New("unable to convert string to <%- `${goName(schema.name)}` %>")
		}
	}

		<% }%>
	<% }) %>


<% schema.imports.forEach(imp => { %>
	<% let returnType = imp.output ? toGolangReturnType(imp.output) : null -%>
	<% if (hasComment(imp)) -%>
	// <%- goName(imp.name) %> <%- formatCommentBlock(imp.description, "// ") %>
	<% if (hasComment(imp.input)) { -%>
	// It takes input of <%- toGolangType(imp.input) %> (<%- formatCommentLine(imp.input.description) %>)
	<% } -%>
	<% if (hasComment(imp.output)) { -%>
	// And it returns an output <%- returnType %> (<%- formatCommentLine(imp.output.description) %>)
	<% } -%>
	func <%- goName(imp.name) %>(<%- imp.input ? `input ${toGolangType(imp.input)}` : null %>) <%- imp.output ? `(${returnType}, error)` : "error" %> {
		var err error
		_ = err
	<% if (imp.input) { -%>
		<% if (isJsonEncoded(imp.input)) { -%>
		mem, err := pdk.AllocateJSON(&input)
		if err != nil {
			return <%- imp.output ? "nil, err" : "err" %>
		}
		<% } else if (isEnum(imp.input)) { -%>
		mem := pdk.AllocateString(input.String())
		<% } else if (isString(imp.input) || isUtf8Encoded(imp.input)) { -%>
		mem := pdk.AllocateString(input)
		<% } else { -%>
		mem := pdk.AllocateBytes(input)
		<% } -%>

		<% if (imp.output) { -%>offs :=<% } -%> _<%- goName(imp.name) %>(mem.Offset())
	<% } else { -%>
		<% if (imp.output) { -%>offs :=<% } -%> _<%- goName(imp.name) %>()
	<% } -%>
	
	<% if (imp.output) { -%>
		<% let returnVar = returnType.startsWith('*') ? '&out' : 'out' %>
		<% if (isJsonEncoded(imp.output)) { -%>
			var out <%- toGolangType(imp.output) %>
			err = pdk.JSONFrom(offs, &out)
			if err != nil {
				return nil, err
			}
			return <%- returnVar %>, nil
		<% } else if (isString(imp.output) || isUtf8Encoded(imp.output)) { -%>
			outputMem := pdk.FindMemory(offs)
			out := string(outputMem.ReadBytes())
			return <%- returnVar %>, nil
		<% } else { -%>
			outputMem := pdk.FindMemory(offs)
			out := outputMem.ReadBytes()
			return <%- returnVar %>, nil
		<% } -%>
	<% } else { %>
		return nil
	<% } %>
	}
<% }) %>